#!/usr/bin/env python3

# Copyright (C) 2016 Simon Dirmeier
#
# This file is part of rnaiutilities.
#
# rnaiutilities is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# rnaiutilities is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rnaiutilities. If not, see <http://www.gnu.org/licenses/>.
#
# @author = 'Simon Dirmeier'
# @email = 'simon.dirmeier@bsse.ethz.ch'


import logging
import click

from rnaiutilities import Query

logger = logging.getLogger(__name__)


@click.group()
def cli():
    logging.basicConfig(
      format='[%(levelname)-1s/%(processName)-1s/%(name)-1s]: %(message)s')


@cli.command()
@click.argument("path", type=str)
@click.option("--db",
              default=None,
              help="Sqlite database file."
                   " If unset uses a postgres database listening on port 5432."
                   " Otherwise, if set, uses the database file and opens a "
                   "connection to sqlite.")
def insert(path, db):
    """
    Inserts meta data from PATH to a database.
    """

    q = Query(db)
    q.insert(path)


@cli.command()
@click.argument("select",
                type=click.Choice(["study", "pathogen", "library", "plate",
                                   "design", "gene", "sirna", "well",
                                   "featureclass"]))
@click.option("--db", default=None,
              help="Sqlite database file."
                   " If unset uses a postgres database listening on port 5432."
                   " Otherwise, if set, uses the database file and opens a "
                   "connection to sqlite.")
@click.option("--study", default=None,
              help="The study to query for, e.g. like 'infectx', "
                   "or a comma-separated string of libraries, "
                   "such as 'infectx,infectx_published'.")
@click.option("--pathogen", default=None,
              help="The pathogen to query for, e.g. like 'adeno', "
                   "or a comma-separated string of pathogens, "
                   "such as 'adeno,bartonella'.")
@click.option("--library", default=None,
              help="The library to query for, e.g. like 'd', "
                   "or a comma-separated string of libraries, "
                   "such as 'd,q'.")
@click.option("--plate", default=None,
              help="The plate to query for, e.g. like 'dz03-1k', "
                   "or a comma-separated string of plates, "
                   "such as 'dz03-1k,dz04-1k'.")
@click.option("--design", default=None,
              help="The design to query for, e.g. like 'p'.")
@click.option("--replicate", default=None, type=int,
              help="The replicate to query for, e.g. like '1', "
                   "or a comma-separated string of replicates, "
                   "such as '1,4'.")
@click.option("--gene", default=None,
              help="The gene to query for, e.g. like "
                   "'pik3ca', or a comma-separated string of genes, "
                   "such as 'pik3ca,pik4ca' ")
@click.option("--sirna", default=None,
              help="The sirna to query for, e.g. like 's12312', "
                   "or a comma-separated string of sirnas, "
                   "such as 's12312,s123112'.")
@click.option("--well", default=None,
              help="The well to query for, e.g. like 'a01', "
                   "or a comma-separated string of wells, "
                   "such as 'a01,l05'.")
@click.option("--featureclass", default=None,
              help="The featureclass to query for, e.g. like 'cells'.")
def select(select, db,
           study, pathogen, library, design, replicate, plate,
           gene, sirna, well,
           featureclass):
    """
    Submits a SELECT query to the database.
    """

    q = Query(db)
    res = q.select(select,
                   study=study,
                   pathogen=pathogen,
                   library=library,
                   design=design,
                   replicate=replicate,
                   plate=plate,
                   gene=gene,
                   sirna=sirna,
                   well=well,
                   featureclass=featureclass)
    for r in res:
        print(r)


@cli.command()
@click.argument("outfile", type=str)
@click.option("--db", default=None,
              help="Sqlite database file."
                   " If unset uses a postgres database listening on port 5432."
                   " Otherwise, if set, uses the database file and opens a "
                   "connection to sqlite.")
@click.option("--study", default=None,
              help="The study to query for, e.g. like 'infectx', "
                   "or a comma-separated string of libraries, "
                   "such as 'infectx,infectx_published'.")
@click.option("--pathogen", default=None,
              help="The pathogen to query for, e.g. like 'adeno', "
                   "or a comma-separated string of pathogens, "
                   "such as 'adeno,bartonella'.")
@click.option("--library", default=None,
              help="The library to query for, e.g. like 'd', "
                   "or a comma-separated string of libraries, "
                   "such as 'd,q'.")
@click.option("--plate", default=None,
              help="The plate to query for, e.g. like 'dz03-1k', "
                   "or a comma-separated string of plates, "
                   "such as 'dz03-1k,dz04-1k'.")
@click.option("--design", default=None,
              help="The design to query for, e.g. like 'p'.")
@click.option("--replicate", default=None, type=int,
              help="The replicate to query for, e.g. like '1', "
                   "or a comma-separated string of replicates, "
                   "such as '1,4'.")
@click.option("--gene", default=None,
              help="The gene to query for, e.g. like "
                   "'pik3ca', or a comma-separated string of genes, "
                   "such as 'pik3ca,pik4ca' ")
@click.option("--sirna", default=None,
              help="The sirna to query for, e.g. like 's12312', "
                   "or a comma-separated string of sirnas, "
                   "such as 's12312,s123112'.")
@click.option("--well", default=None,
              help="The well to query for, e.g. like 'a01', "
                   "or a comma-separated string of wells, "
                   "such as 'a01,l05'.")
@click.option("--featureclass", default=None,
              help="The featureclass to query for, e.g. like 'cells'.")
@click.option("--sample", default=None, type=int,
              help="The amount of single cells that are sampled per well, "
                   "like '100'. If unset defaults to all cells.")
@click.option("--debug",
              is_flag=True,
              help="Print some debug info and skip writing to file.")
def query(outfile, db,
          study, pathogen, library, design, replicate, plate,
          gene, sirna, well,
          featureclass, sample,
          debug):
    """
    Query and sample single cells or bacteria and write to an OUTFILE.
    """

    if debug:
        logger.setLevel(logging.DEBUG)
        logger.debug("Debug mode.")

    q = Query(db)
    res = q.query(study=study,
                  pathogen=pathogen,
                  library=library,
                  design=design,
                  replicate=replicate,
                  plate=plate,
                  gene=gene,
                  sirna=sirna,
                  well=well,
                  featureclass=featureclass,
                  sample=sample)
    if debug:
        for r in res:
            logger.debug(r.detail())
    else:
        res.dump(outfile)


if __name__ == "__main__":
    cli()
