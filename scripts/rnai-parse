#!/usr/bin/env python3

# Copyright (C) 2016 Simon Dirmeier
#
# This file is part of rnaiutilities.
#
# rnaiutilities is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# rnaiutilities is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with rnaiutilities. If not, see <http://www.gnu.org/licenses/>.
#
# @author = 'Simon Dirmeier'
# @email = 'simon.dirmeier@bsse.ethz.ch'


import logging
import click

from rnaiutilities import Parser
from rnaiutilities import Config


@click.group()
def cli():
    logging.basicConfig(
      format='[%(levelname)-1s/%(processName)-1s/%(name)-1s]: %(message)s')


@cli.command()
@click.argument("config", type=str)
@click.argument("outfile", type=str)
def featuresets(config, outfile):
    """
    Computes pairwise Jaccard indexes between all possible screens in CONFIG and
    write the results to OUTFILE.
    The overlaps can be taken to decide which screens to include in the analysis
    """

    c = Config(config)
    Parser(c).featureset_statistics(outfile)


@cli.command()
@click.argument("config", type=str)
def checkdownload(config):
    """
    Checks if all files from CONFIG have been downloaded correctly and
    computes some statistics
    """

    c = Config(config)
    Parser(c).download_statistics()


@cli.command()
@click.argument("config", type=str)
def parsereport(config):
    """
    Computes statistics if all files from CONFIG have been parsed correctly.
    """

    c = Config(config)
    Parser(c).parse_statistics()


@cli.command()
@click.argument("config", type=str)
def parse(config):
    """
    Parses image-based RNAi screening files to flat tsvs from a CONFIG file.
    """

    c = Config(config)
    Parser(c).parse()


if __name__ == "__main__":
    cli()
